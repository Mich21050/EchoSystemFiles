description "OpenNTP Implementation of Network Time Protocol"
author      "Amazon.com, Inc."

start on filesystem
stop on starting shutdown

expect fork
respawn

pre-start script

    # This function is used to log metric which gets uploaded to the metric
    # server
    log_metric()
    {
        METRIC_NAME=$1
        TIME_EPOCH=$(date +'%s')
        /usr/bin/logger -t ntpd -p local7.0 "I metric_high_priority,$TIME_EPOCH,counter,ntpd,ntpdate_up—ïtart,$METRIC_NAME,1" || :
    }

    /usr/bin/logger -t system -p local4.info "I openntpd:Start upstart script" || :
    # Location of the shared file used to communicate between this script and the http time fetcher
    HTTP_TIME_SUCCESS_FILE=/tmp/http_time_success

    # Initialize the HTTP_TIME_SET variable
    HTTP_TIME_SET=false

    # This function returns success (status 0) if the HTTP_TIME_SUCCESS_FILE is found and the text
    # "true" is contained in it. Otherwise it returns failure (status 1)
    http_time_fetch_success ()
    {
        HTTP_TIME_SET=false
        # Check if time fetch was successful through HTTP
        if [ -e $HTTP_TIME_SUCCESS_FILE ]; then
            /usr/bin/logger -t system -p local4.info "I openntpd:http_time_fetch_success::HTTP_TIME_SUCCESS_FILE found" || :
            while read value
            do
                if [ "$value" = "true" ]; then
                    HTTP_TIME_SET=true
                fi
            done < $HTTP_TIME_SUCCESS_FILE
        fi

        if [ "$HTTP_TIME_SET" = "true" ]; then
            echo "0"
        else
            echo "1"
        fi
    }

    # ntpd uses this as its $HOME directory. See /etc/passwd
    [ -d /var/shared/empty ] || mkdir -p /var/shared/empty

    if [ ! -f /etc/ntpd.conf ] ; then
        /usr/bin/logger -t system -p local4.info "W openntpd:missingConfigFile::"
        exit 0
    fi

    # Spin until we can successfully set the date with ntpdate or http_time_fetcher (one shot)
    OPTS="-u -s -b"
    SERVERS=$(awk '/^server/ { print $2 }' /etc/ntpd.conf)
    NTPDATE_UPDATE_FAIL_LOGGED=false

    while :
    do
        WIFI_STATE=$(/usr/local/bin/lipc-get-prop -s com.lab126.wifid cmState || :)
        /usr/bin/logger -t system -p local4.info "I openntpd:wifiState::$WIFI_STATE" || :

        if [ "$WIFI_STATE" = "CONNECTED" ] ; then
            /usr/bin/logger -t system -p local4.info "I openntpd:wifiStateConnected" || :

            if ! /usr/bin/ntpdate $OPTS $SERVERS
            then
                /usr/bin/logger -t system -p local4.info "W openntpd:updateTimeFromNtpDateFailed::Trying HTTP in one shot mode" || :
                if [ "$NTPDATE_UPDATE_FAIL_LOGGED" = "false" ]; then
                    log_metric NtpdateFailure
                    NTPDATE_UPDATE_FAIL_LOGGED=true
                fi

                # Attempt time fetch through HTTP
                /usr/local/bin/http_time_fetcher -o || :

                if [ $(http_time_fetch_success) -eq 1 ] ; then
                    HTTP_TIME_SET=false
                    /usr/bin/logger -t system -p local4.info "W openntpd:updateTimeFromHttpOSFailed::Sleeping for 2 seconds. Logging metric" || :
                    log_metric HttpTimeFetchFailure
                    /bin/sleep 2 || :
                else
                    TIME=$(date)
                    HTTP_TIME_SET=true
                    /usr/bin/logger -t system -p local4.info "W openntpd:updateTimeFromHttpOSSuccess::The time is now $TIME. Logging metric" || :
                    log_metric HttpTimeFetchSuccess
                    break
                fi
            else
                TIME=$(date)
                /usr/bin/logger -t system -p local4.info "W openntpd:updateTimeFromNtpDateSuccess::The time is now $TIME" || :
                break
            fi
        else
            /usr/bin/logger -t system -p local4.info "W openntpd:wifiStateNotConnected::Sleeping for 2 seconds" || :
            /bin/sleep 2 || :
        fi
    done

    # Lab126-specific stuff

    # If we can save the new time, we should.
    if [ -x /usr/local/bin/save-the-date ]
    then
        /usr/local/bin/save-the-date || :
    fi

    /usr/bin/logger -t system -p local4.info "I openntpd:settingDeviceKnowsTime:HTTP_TIME_SET=$HTTP_TIME_SET:Setting lipc-daemon" || :
    /usr/local/bin/lipc-set-prop com.lab126.system deviceHasTime -s "true" || :

    /usr/bin/logger -t system -p local4.info "W openntpd:triggeringToDo:HTTP_TIME_SET=$HTTP_TIME_SET:About to trigger todo" || :
    /usr/local/bin/lipc-set-prop com.lab126.todo scheduleToDo -i 1 || :
    /usr/bin/logger -t system -p local4.info "W openntpd:triggeringToDo:HTTP_TIME_SET=$HTTP_TIME_SET:todo triggered" || :

    # And now, without further ado: ntpd!
end script

exec /usr/sbin/ntpd
