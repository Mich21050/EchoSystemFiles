description "Load Atheros Wi-Fi kernel modules"
author      "Amazon.com, Inc."

start on (virtual-filesystems) or (restart-wifi) or (wifi-crashed)
stop on (restart-wifi) or (wifi-crashed)

env RESET_GPIO=/sys/class/gpio/gpio21/value
env CONTROLLER_PATH=/sys/bus/platform/drivers/mmci-omap-hs
env PANCAKE_BDATA="/lib/firmware/ath6k/AR6004/hw3.0/bdata-pancake.bin"
env DOPPLER_BDATA="/lib/firmware/ath6k/AR6004/hw3.0/bdata.bin"
env COUNTRY_CODE_TO_REG_DOMAIN_MAP_FILE=/etc/default/country-code-to-reg-domain

pre-start script

    if [ -f "${COUNTRY_CODE_TO_REG_DOMAIN_MAP_FILE}" ]; then
        source $COUNTRY_CODE_TO_REG_DOMAIN_MAP_FILE
    fi

    # Convenience function to log messages into syslog
    LOGGER ()
    {
        logger -p local4.info -t "modules-atheros: I module-load:setup:" $@;
    }

    # Default country code and reg domain is "WW".
    # Keep these two variables in sync with @link{country-code-to-reg-domain file}
    COUNTRY_CODE_DEFAULT="WW"
    REG_DOMAIN_DEFAULT="0x0000"

    # Invalid reg domain value
    REG_DOMAIN_INVALID="NA"

    # Name of the key in dynconfig that stores the user's country code
    COUNTRY_CODE_DYNCONFIG_KEY_COR=wifi.countryOfResidence

    # Name of the key in dynconfig that stores the user's device locale
    COUNTRY_CODE_DYNCONFIG_KEY_DL=device.locale

    # This function returns the hex-encoded regulatory domain value corresponding to a country code
    # If the country code is WW, it returns the special code "0x0". If the country code is invalid,
    # it returns REG_DOMAIN_INVALID
    get_reg_domain ()
    {
        SEARCH_KEY="$1"
        FOUND=false
        for entry in "${COUNTRY_CODE_TO_REG_DOMAIN[@]}" ; do
            read -r -a tokens <<< "$entry"
            # Each entry in the array is of the form YY 0x8abc
            if [ ${#tokens[@]} -ne 2 ]; then
                echo "Invalid entry in CountryCodeToRegDomain array: ${entry}" | LOGGER
                continue
            fi

            KEY=${tokens[0]}
            VALUE=${tokens[1]}
            if [ "${SEARCH_KEY}" = "${KEY}" ]; then
                FOUND=true
                break
            fi
        done

        if [ "$FOUND" = "true" ]; then
            echo $VALUE
        else
            echo ${REG_DOMAIN_INVALID}
        fi
    }

    # This function returns the country code specified in device.locale. If none
    # is present, it returns an empty string
    get_country_code_from_device_locale ()
    {
        LANG_COUNTRY_CODE=$(get-dynconf-value ${COUNTRY_CODE_DYNCONFIG_KEY_DL} || true)
        if [ -z "$LANG_COUNTRY_CODE" ]; then
            echo ""
        else
            # In COUNTRY_CODE_DYNCONFIG_KEY_DL, the country code is prefixed with a 2-letter
            # language code and a hyphen.
            IFS='-' read -r -a tokens <<< "$LANG_COUNTRY_CODE"
            if [ ${#tokens[@]} -ne 2 ]; then
                echo "Invalid language-country code in ${COUNTRY_CODE_DYNCONFIG_KEY_DL}:"\
                     "${LANG_COUNTRY_CODE}" | LOGGER
                echo ""
            else
                echo "${tokens[1]}"
            fi
        fi
    }

    BDATA_BIN=$DOPPLER_BDATA
    # Determine if hardware is Pancake and load different dbata.bin file
    if (/usr/local/bin/boardquery is_Pancake); then
        if [ -f $PANCAKE_BDATA ]; then
            BDATA_BIN=$PANCAKE_BDATA
        fi
    fi

    # The algorithm to retrieve country code works as follows
    # Case 1: If dynconfig specifies a valid country code through COUNTRY_CODE_DYNCONFIG_KEY_COR
    #         use it
    # Case 2: If COUNTRY_CODE_DYNCONFIG_KEY_COR has an invalid country code or does not specify
    #         one, query COUNTRY_CODE_DYNCONFIG_KEY_DL. If this gives a valid country code, use it
    # Case 3: If neither key has a valid country code, default to COUNTRY_CODE_DEFAULT
    #
    # In all cases, set the COUNTRY_CODE_DYNCONFIG_KEY_COR to the country code selected
    if [ -f "${COUNTRY_CODE_TO_REG_DOMAIN_MAP_FILE}" ]; then
        COUNTRY_CODE_COR=$(get-dynconf-value ${COUNTRY_CODE_DYNCONFIG_KEY_COR} || true)
        COUNTRY_CODE_DL=$(get_country_code_from_device_locale)
        REG_DOMAIN_COR=$(get_reg_domain ${COUNTRY_CODE_COR})
        REG_DOMAIN_DL=$(get_reg_domain ${COUNTRY_CODE_DL})

        echo "COUNTRY_CODE_COR=${COUNTRY_CODE_COR},"\
             "REG_DOMAIN_COR=${REG_DOMAIN_COR},"\
             "COUNTRY_CODE_DL=${COUNTRY_CODE_DL},"\
             "REG_DOMAIN_DL=${REG_DOMAIN_DL}" | LOGGER

        if [ "${REG_DOMAIN_COR}" != "${REG_DOMAIN_INVALID}" ]; then
            # Case 1
            COUNTRY_CODE=${COUNTRY_CODE_COR}
            REG_DOMAIN=${REG_DOMAIN_COR}
        elif [ "${REG_DOMAIN_DL}" != "${REG_DOMAIN_INVALID}" ]; then
            # Case 2
            COUNTRY_CODE=${COUNTRY_CODE_DL}
            REG_DOMAIN=${REG_DOMAIN_DL}
        else
            # Case 3
            COUNTRY_CODE=${COUNTRY_CODE_DEFAULT}
            REG_DOMAIN=${REG_DOMAIN_DEFAULT}
        fi
    else
        # If no reg domain map file is found, default to worldwide safe
        echo "No country code to reg domain map file found. Defaulting to worldwide safe" | LOGGER
        COUNTRY_CODE=${COUNTRY_CODE_DEFAULT}
        REG_DOMAIN=${REG_DOMAIN_DEFAULT}
    fi

    set-dynconf-value ${COUNTRY_CODE_DYNCONFIG_KEY_COR} ${COUNTRY_CODE} || true
    echo "Country Code selected:${COUNTRY_CODE}" | LOGGER
    echo "Regulatory Domain selected:${REG_DOMAIN}" | LOGGER

    insmod /lib/modules/`uname -r`/compat.ko
    insmod /lib/modules/`uname -r`/cfg80211.ko

    if [ "${COUNTRY_CODE}" = "${COUNTRY_CODE_DEFAULT}" ]; then
        insmod /lib/modules/`uname -r`/ath6kl_sdio.ko ath6kl_p2p=0x613 \
            ath6kl_roam_mode=0x2 bdatapath=$BDATA_BIN debug_quirks=0x00a02008 \
            ath6kl_wifi_mac=`cat /proc/mac | sed 's/../&:/g;s/:$//'`
    else
        insmod /lib/modules/`uname -r`/ath6kl_sdio.ko reg_domain=${REG_DOMAIN} ath6kl_p2p=0x613 \
            ath6kl_roam_mode=0x2 bdatapath=$BDATA_BIN debug_quirks=0x00a02008 \
            ath6kl_wifi_mac=`cat /proc/mac | sed 's/../&:/g;s/:$//'`
    fi
end script

post-start script
    # Sleep for atleast 1 second before starting wpa_supplicant
    sleep 1
end script

post-stop script
    rmmod -v ath6kl_sdio
    rmmod -v cfg80211
    rmmod -v compat

    # unbind QCA6234
    echo mmci-omap-hs.2 > $CONTROLLER_PATH/unbind

    # perform reset
    if [ -f "$RESET_GPIO" ]; then
        echo 0 > "$RESET_GPIO"
        usleep 100000
        echo 1 > "$RESET_GPIO"
    else
        echo "Unable to reset Wifi GPIO"
    fi

    # bind QCA6234
    echo mmci-omap-hs.2 > $CONTROLLER_PATH/bind

end script

