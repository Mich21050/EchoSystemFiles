# Copyright (c) 2014-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# PROPRIETARY/CONFIDENTIAL
#
# Use is subject to license terms.

mount {
	cpu = /sys/fs/cgroup/cpu;
	cpuacct = /sys/fs/cgroup/cpu;
	memory = /sys/fs/cgroup/cpu;
}

# root group cpu.shares is fixed at "1024" in kernel
# RT perms set to 80% CPU. (Can't set to 16ms period; not sure why)
group . {
	cpu {
		cpu.rt_period_us = "1000000";
		cpu.rt_runtime_us = "800000";
	}
}

# CPU ALLOCATION STRATEGY
#
# General rule:
#
#     cpu.shares = 100 * CPU_BUDGET_PERCENT
#     cpu.rt_period_us = 64000 (audioproxyd's wake-up period)
#     cpu.rt_runtime_us = 64000 * RT_BUDGET_PERCENT / 100
#
# The sum of all cpu.rt_runtime_us must be <=12800 (64000 * 80%)

# Low-level audio processes (e.g. audioproxyd). 5% CPU
group audio-drivers {
	cpu {
		cpu.shares = "500";
		cpu.rt_period_us = "64000";
		cpu.rt_runtime_us = "4000";
	}
	memory {
		memory.limit_in_bytes = "12M";
		memory.swappiness = "60";
	}
}

# ASR processes (i.e. asrd). 39% CPU
group audio-asr {
	cpu {
		cpu.shares = "4200";
		cpu.rt_period_us = "64000";
		cpu.rt_runtime_us = "6000";
	}
	memory {
		memory.limit_in_bytes = "20M";
		memory.swappiness = "0";
	}
}

# Core audio services (e.g. pulseaudio)
group audio-core {
	cpu {
		cpu.shares = "2500";
		cpu.rt_period_us = "64000";
		cpu.rt_runtime_us = "20000";
	}
	memory {
		memory.limit_in_bytes = "24M";
		memory.swappiness = "0";
	}
}

# Audio playback (audioplayerng, etc.)
# If you change the shares, also update the 'iperf' group
group audio-playback {
	cpu {
		cpu.shares = "5000";
		cpu.rt_period_us = "64000";
		cpu.rt_runtime_us = "4000";
	}
	memory {
		memory.limit_in_bytes = "150M";
		memory.swappiness = "60";
	}
}

# Audio capture (audioencoderd, etc.)
group audio-capture {
	cpu {
		cpu.shares = "2500";
		cpu.rt_period_us = "64000";
		cpu.rt_runtime_us = "4000";
	}
	memory {
		memory.limit_in_bytes = "5M";
		memory.swappiness = "0";
	}
}

# ledd. 5% CPU
# Special case: increasing shares to mimic RT-scheduling
group ledd {
	cpu {
		cpu.shares = "800";
		cpu.rt_runtime_us = "0";
	}
	memory {
		memory.limit_in_bytes = "3M";
		memory.swappiness = "0";
	}
}

# gadgetsd
group gadgetsd {
	cpu {
		cpu.shares = "300";
		cpu.rt_runtime_us = "0";
	}
	memory {
		memory.limit_in_bytes = "8M";
		memory.swappiness = "100";
	}
}

# Special group for dbus and controld
# Typical usage is less than 4MB, but if dbus crashes, we never
# recover... so only crash if it's a killer leak.
group system-uber-critical {
	cpu {
		cpu.shares = "5000";
		cpu.rt_runtime_us = "0";
	}
	memory {
		memory.limit_in_bytes = "7M";
		memory.swappiness = "0";
	}
}

# system misc. 6% CPU
# Special case: critical tasks need to execute with high priority
group system-critical {
	cpu {
		cpu.shares = "2000";
		cpu.rt_period_us = "64000";
		cpu.rt_runtime_us = "640";
	}
	memory {
		memory.limit_in_bytes = "45M";
		memory.swappiness = "100";
	}
}

group system-noncritical {
	cpu {
		cpu.shares = "100";
		cpu.rt_runtime_us = "0";
	}
	memory {
		memory.limit_in_bytes = "46M";
		memory.swappiness = "100";
	}
}

# special group for iperf, which is only used for testing
# The shares need to be about the same as the 'audio-playback' group
# to get a fuzzy indication of playback bandwidth.
group iperf {
	cpu {
		cpu.shares = "5000";
		cpu.rt_period_us = "64000";
		cpu.rt_runtime_us = "0";
		memory.swappiness = "100";
	}
}

# Catch-all group for "other"
group other {
	cpu {
		cpu.shares = "300";
		cpu.rt_runtime_us = "0";
	}
	memory {
		memory.limit_in_bytes = "32M";
		memory.swappiness = "100";
	}
}
